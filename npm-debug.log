0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', 'sqlite', '--save' ]
2 info using npm@1.2.0
3 info using node@v0.8.17
4 verbose read json /Users/shane/Code/cripples/package.json
5 verbose read json /Users/shane/Code/cripples/node_modules/express/package.json
6 verbose read json /Users/shane/Code/cripples/node_modules/jade/package.json
7 verbose read json /Users/shane/Code/cripples/node_modules/lodash/package.json
8 verbose read json /Users/shane/Code/cripples/node_modules/mysql/package.json
9 verbose read json /Users/shane/Code/cripples/node_modules/request/package.json
10 verbose read json /Users/shane/Code/cripples/node_modules/sequelize/package.json
11 verbose read json /Users/shane/Code/cripples/node_modules/sqlite3/package.json
12 verbose from cache /Users/shane/Code/cripples/package.json
13 verbose readDependencies using package.json deps
14 verbose cache add [ 'sqlite', null ]
15 silly cache add name=undefined spec="sqlite" args=["sqlite",null]
16 verbose parsed url { pathname: 'sqlite', path: 'sqlite', href: 'sqlite' }
17 silly lockFile 6d64a5ee-sqlite sqlite
18 verbose lock sqlite /Users/shane/.npm/6d64a5ee-sqlite.lock
19 silly lockFile 6d64a5ee-sqlite sqlite
20 verbose addNamed [ 'sqlite', '' ]
21 verbose addNamed [ null, '' ]
22 silly lockFile 02179a0b-sqlite sqlite@
23 verbose lock sqlite@ /Users/shane/.npm/02179a0b-sqlite.lock
24 silly addNameRange { name: 'sqlite', range: '', hasData: false }
25 verbose url raw sqlite
26 verbose url resolving [ 'https://registry.npmjs.org/', './sqlite' ]
27 verbose url resolved https://registry.npmjs.org/sqlite
28 info trying registry request attempt 1 at 21:17:30
29 verbose etag "A5LMX87V4BKZB91MV8JGBY05L"
30 http GET https://registry.npmjs.org/sqlite
31 http 304 https://registry.npmjs.org/sqlite
32 silly registry.get cb [ 304,
32 silly registry.get   { date: 'Sun, 11 May 2014 20:17:29 GMT',
32 silly registry.get     server: 'Apache',
32 silly registry.get     via: '1.1 varnish',
32 silly registry.get     'last-modified': 'Sun, 11 May 2014 20:17:29 GMT',
32 silly registry.get     'cache-control': 'max-age=1',
32 silly registry.get     etag: '"A5LMX87V4BKZB91MV8JGBY05L"',
32 silly registry.get     'x-served-by': 'cache-fra1229-FRA',
32 silly registry.get     'x-cache': 'MISS',
32 silly registry.get     'x-cache-hits': '0',
32 silly registry.get     'x-timer': 'S1399839449.150925875,VS0,VE95',
32 silly registry.get     vary: 'Accept',
32 silly registry.get     'content-length': '0',
32 silly registry.get     'keep-alive': 'timeout=10, max=50',
32 silly registry.get     connection: 'Keep-Alive' } ]
33 verbose etag sqlite from cache
34 silly addNameRange number 2 { name: 'sqlite', range: '', hasData: true }
35 silly addNameRange versions [ 'sqlite', [ '1.0.2', '1.0.3', '1.0.4' ] ]
36 verbose addNamed [ 'sqlite', '1.0.4' ]
37 verbose addNamed [ '1.0.4', '1.0.4' ]
38 silly lockFile f07a2cfe-sqlite-1-0-4 sqlite@1.0.4
39 verbose lock sqlite@1.0.4 /Users/shane/.npm/f07a2cfe-sqlite-1-0-4.lock
40 verbose read json /Users/shane/.npm/sqlite/1.0.4/package/package.json
41 silly lockFile f07a2cfe-sqlite-1-0-4 sqlite@1.0.4
42 silly lockFile 02179a0b-sqlite sqlite@
43 silly resolved [ { name: 'sqlite',
43 silly resolved     description: 'SQLite3 bindings for Node',
43 silly resolved     version: '1.0.4',
43 silly resolved     homepage: 'http://github.com/orlandov/node-sqlite',
43 silly resolved     author:
43 silly resolved      { name: 'Orlando Vazquez',
43 silly resolved        email: 'ovazquez@gmail.com',
43 silly resolved        url: 'http://2wycked.net' },
43 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
43 silly resolved     repository:
43 silly resolved      { type: 'git',
43 silly resolved        url: 'http://github.com/orlandov/node-sqlite.git' },
43 silly resolved     main: './sqlite',
43 silly resolved     engines: { node: '>=0.2.0' },
43 silly resolved     scripts: { test: './run-tests', preinstall: 'node-waf configure build' },
43 silly resolved     licenses: [ [Object] ],
43 silly resolved     readme: '# NAME\n\nnode-sqlite - Asynchronous SQLite3 driver for Node.js\n\nSQLite calls block, so to work around this, synchronous calls happen within\nNode\'s libeio thread-pool, in a similar manner to how POSIX calls are\ncurrently made.\n\n# SYNOPSIS\n\n## High-level Driver\n\n    var sys    = require(\'sys\'),\n        sqlite = require(\'sqlite\');\n\n    var db = new sqlite.Database();\n\n    // open the database for reading if file exists\n    // create new database file if not\n\n    db.open("aquateen.db", function (error) {\n      if (error) {\n          console.log("Tonight. You."));\n          throw error;\n      }\n      db.execute\n        ( "INSERT INTO aqua_teens (name) VALUES (?)"\n        , [\'meaty meaty moo\']\n        , function (error, rows) {\n            if (error) throw error;\n            console.log("Aqua teen added.");\n          }\n        );\n      var sql = \'SELECT name FROM dudes WHERE type = ? AND age > ?\';\n\n      db.prepare(sql, function (error, statement) {\n        if (error) throw error;\n\n        // Fill in the placeholders\n        statement.bindArray([\'milkshake\', 30], function () {\n\n          statement.fetchAll(function (error, rows) {\n            // ...\n            statement.finalize(function (error) {\n              console.log("All done!");\n            });\n          });\n        });\n      });\n    });\n\n# API\n\n## Database Objects\n\nTo create a new database object:\n    var sqlite = require(\'sqlite\');\n\n    var db = sqlite.Database();\n\n### database.open(filename, function (error) {})\n\nOpen a database handle to the database at the specified filename. If the file\ndoes not exist the bindings will attempt to create it. The callback takes no\narguments.\n\nA filename of ":memory:" may be used to create an in-memory database.\n\n### database.close(function (error) {})\n\nClose the database handle.\n\n### database.execute(sql[, bindings], function (error, rows) {})\n\nExecute a SQL query, `sql` with optional bindings `bindings` on the currently\nopened database. The callback will be executed once with all the rows returned\nfor the query. This is much faster than `database.query` since there are less roundtrips into the thread-pool.\n\n### database.query(sql, [bindings,] function (error, row) {})\n\nExecute a SQL query, `sql`, with optional bindings `bindings` on the currently\nopened database. The callback will be executed once per row returned, plus\nonce more with row set to undefined to indicate end of results.\n\n### database.executeScript(SQL, function (error) {});\n\n    db.executeScript\n      (   "CREATE TABLE table1 (id, name);"\n        + "CREATE TABLE table2 (id, age);"\n        + "INSERT INTO table1 (1, \'Mister Shake\');"\n        + "INSER INTO table2 (1, 34);"\n      , function (error) {\n          if (error) throw error;\n          // ...\n        });\n\nExecute multiple semi-colon separated SQL statements. Statements must take no\nplaceholders. Each statement will be executed with a single step() and then\nreset. This is ideally suited to executing multiple DDL statements.\n\n### database.prepare(SQL, [options,] function (error, statement) {})\n\nCreate a prepared statement from an SQL string. Prepared statements can be\nused used to iterate over results and to avoid compiling SQL each time a query\nis performed.\n\nOptions:\n\n- lastInsertRowID: boolean, default false.\n    If true, when this statement is step()\'d over, the context object (this) in\n    the callback will contain a lastInsertRowID member with the ID of the last\n    inserted row.\n\n- affectedRows: boolean, default false.\n    If true, when this statement is step()\'d over, the context object (this) in\n    the callback will contain an affectedRows member with the number of\n    affected rows for the last step.\n\n## Statement Objects\n\n### statement.bindArray(array, function (error) {})\n\n    statement.bindArray([1, \'robots\', 4.20], callback)\n\nBind array items to place-holder values (? or $foo) in statement.\n\n### statement.bindObject(object, function (error) {})\n\n    statement.bindObject({ $name: \'meatwad\',\n                           $occupation: \'Former detective\' }, callback)\n\nBind object properties to named place-holder values ($foo, $bar, $baz) in\nstatement.\n\n### statement.bind(position, value, function (error) {})\n\n    statement.bind(1, "tango", function (error) {})\n\nBind a value to a place-holder position. Because binding place-holders is done\nby position (not index), the first place-holder is at position 1, second at\nplace-holder position 2, etc.\n\n### statement.clearBindings()\n\nImmediately clear the bindings from the statement. There is no callback.\n\n### statement.step(function (error, row) {})\n\nFetch one row from a prepared statement and hand it off to a callback. If\nthere are no more rows to be fetched, row will be undefined. Rows are\nrepresented as objects with properties named after the respective columns.\n\n### statement.fetchAll(function (error, rows) {})\n\nFetch all rows in statement and pass them to the callback as an array of\nobjects, each object representing one row.\n\n### statement.reset()\n\nImmediately reset a statement object back to it\'s initial state, ready to be\nstep() or fetchAll()\'d again.\n\n### statement.finalize(function (error) {})\n\nFree SQLite objects associated with this statement and mark it for garbage\ncollection.\n\n## Supported Types\n\nAt the moment, the supported types are TEXT, NUMBER, FLOAT and NULL.\n\n# BUILDING\n\nTo obtain and build the bindings:\n\n    git clone http://github.com/orlandov/node-sqlite.git\n    cd node-sqlite\n    node-waf configure build\n\n# TESTS\n\nRunning the unit tests could not be easier. Simply:\n\n    git submodule update --init\n    ./run-tests\n\n# SEE ALSO\n\n* http://sqlite.org/docs.html\n* http://github.com/grumdrig/node-sqlite/\n\n# AUTHORS\n\nOrlando Vazquez [ovazquez@gmail.com]\n\nRyan Dahl [ry@tinyclouds.org]\n\n# THANKS\n\nMany thanks to Eric Fredricksen for his synchronous driver on which this\ndriver was originally based.\n\n* http://github.com/grumdrig/node-sqlite/\n* http://grumdrig.com/node-sqlite/\n\n# LICENSE\n\nnode-sqlite is BSD licensed.\n\n(c) 2010 Orlando Vazquez\n',
43 silly resolved     readmeFilename: 'README.md',
43 silly resolved     _id: 'sqlite@1.0.4',
43 silly resolved     _from: 'sqlite' } ]
44 info install sqlite@1.0.4 into /Users/shane/Code/cripples
45 info installOne sqlite@1.0.4
46 verbose from cache /Users/shane/.npm/sqlite/1.0.4/package/package.json
47 info /Users/shane/Code/cripples/node_modules/sqlite unbuild
48 verbose read json /Users/shane/Code/cripples/node_modules/sqlite/package.json
49 verbose tar unpack /Users/shane/.npm/sqlite/1.0.4/package.tgz
50 silly lockFile f1cea367-ode-cripples-node-modules-sqlite /Users/shane/Code/cripples/node_modules/sqlite
51 verbose lock /Users/shane/Code/cripples/node_modules/sqlite /Users/shane/.npm/f1cea367-ode-cripples-node-modules-sqlite.lock
52 silly gunzTarPerm modes [ '755', '644' ]
53 silly gunzTarPerm extractEntry package.json
54 silly gunzTarPerm extractEntry .npmignore
55 silly gunzTarPerm extractEntry README.md
56 silly gunzTarPerm extractEntry sqlite.js
57 silly gunzTarPerm extractEntry build.sh
58 silly gunzTarPerm extractEntry deps/mpool-2.1.0/README
59 silly gunzTarPerm extractEntry deps/mpool-2.1.0/ChangeLog.1
60 silly gunzTarPerm extractEntry deps/mpool-2.1.0/Makefile
61 silly gunzTarPerm extractEntry deps/mpool-2.1.0/mpool.c
62 silly gunzTarPerm extractEntry deps/mpool-2.1.0/mpool.h
63 silly gunzTarPerm extractEntry deps/mpool-2.1.0/mpool_loc.h
64 silly gunzTarPerm extractEntry deps/mpool-2.1.0/mpool_t.c
65 silly gunzTarPerm extractEntry deps/mpool-2.1.0/NEWS
66 silly gunzTarPerm extractEntry deps/sqlite/shell.c
67 silly gunzTarPerm extractEntry deps/sqlite/sqlite3.c
68 silly gunzTarPerm extractEntry deps/sqlite/sqlite3.h
69 silly gunzTarPerm extractEntry deps/sqlite/sqlite3ext.h
70 silly gunzTarPerm extractEntry async-testing/LICENSE
71 silly gunzTarPerm extractEntry async-testing/async_testing.js
72 silly gunzTarPerm extractEntry async-testing/AUTHORS
73 silly gunzTarPerm extractEntry async-testing/examples/test-readme.js
74 silly gunzTarPerm extractEntry async-testing/examples/test-suites.js
75 silly gunzTarPerm extractEntry async-testing/node-async-test
76 silly gunzTarPerm extractEntry async-testing/README.markdown
77 silly gunzTarPerm extractEntry async-testing/todo.txt
78 silly gunzTarPerm extractEntry .gitmodules
79 silly gunzTarPerm extractEntry run-tests
80 silly gunzTarPerm extractEntry src/database.cc
81 silly gunzTarPerm extractEntry src/database.h
82 silly gunzTarPerm extractEntry src/sqlite3_bindings.cc
83 silly gunzTarPerm extractEntry src/sqlite3_bindings.h
84 silly gunzTarPerm extractEntry src/statement.cc
85 silly gunzTarPerm extractEntry src/statement.h
86 silly gunzTarPerm extractEntry tests/test-affected-rows.js
87 silly gunzTarPerm extractEntry tests/test-bind-placeholders.js
88 silly gunzTarPerm extractEntry tests/test-bind-strings.js
89 silly gunzTarPerm extractEntry tests/test-last-inserted-id.js
90 silly gunzTarPerm extractEntry tests/test-prepare.js
91 silly gunzTarPerm extractEntry tests/test-statement-fetchall.js
92 silly gunzTarPerm extractEntry tests/test-statement-step.js
93 silly gunzTarPerm extractEntry tests/lib/common.js
94 silly gunzTarPerm extractEntry tests/old/speedtest-low-parallel-binds.js
95 silly gunzTarPerm extractEntry tests/old/speedtest-low-parallel.js
96 silly gunzTarPerm extractEntry tests/old/speedtest-low.js
97 silly gunzTarPerm extractEntry tests/old/speedtest.js
98 silly gunzTarPerm extractEntry tests/old/speedtest2.js
99 silly gunzTarPerm extractEntry tests/old/test2.js
100 silly gunzTarPerm extractEntry tests/old/speedtest.rb
101 silly gunzTarPerm extractEntry tests/old/speedtest2.rb
102 silly gunzTarPerm extractEntry wscript
103 verbose read json /Users/shane/Code/cripples/node_modules/sqlite/package.json
104 silly lockFile f1cea367-ode-cripples-node-modules-sqlite /Users/shane/Code/cripples/node_modules/sqlite
105 info preinstall sqlite@1.0.4
106 verbose unsafe-perm in lifecycle true
107 silly exec sh "-c" "node-waf configure build"
108 silly sh,-c,node-waf configure build,/Users/shane/Code/cripples/node_modules/sqlite spawning
109 info sqlite@1.0.4 Failed to exec preinstall script
110 info /Users/shane/Code/cripples/node_modules/sqlite unbuild
111 verbose from cache /Users/shane/Code/cripples/node_modules/sqlite/package.json
112 info preuninstall sqlite@1.0.4
113 info uninstall sqlite@1.0.4
114 verbose true,/Users/shane/Code/cripples/node_modules,/Users/shane/Code/cripples/node_modules unbuild sqlite@1.0.4
115 info postuninstall sqlite@1.0.4
116 error sqlite@1.0.4 preinstall: `node-waf configure build`
116 error `sh "-c" "node-waf configure build"` failed with 1
117 error Failed at the sqlite@1.0.4 preinstall script.
117 error This is most likely a problem with the sqlite package,
117 error not with npm itself.
117 error Tell the author that this fails on your system:
117 error     node-waf configure build
117 error You can get their info via:
117 error     npm owner ls sqlite
117 error There is likely additional logging output above.
118 error System Darwin 13.1.0
119 error command "node" "/usr/local/bin/npm" "install" "sqlite" "--save"
120 error cwd /Users/shane/Code/cripples
121 error node -v v0.8.17
122 error npm -v 1.2.0
123 error code ELIFECYCLE
124 verbose exit [ 1, true ]
